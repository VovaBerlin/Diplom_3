{"name": "Заказ пользователя из раздела «История заказов» отображается на странице «Лента заказов»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette", "trace": "self = <tests.test_order_feed.TestMainPage object at 0x000001C890257020>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"0ec567f1-30fc-44f2-9d36-f80fe15d5ad5\")>\n\n    @allure.title('Заказ пользователя из раздела «История заказов» отображается на странице «Лента заказов»')\n    def test_id_order_history_found_in_feed_orders(self, driver):\n        login = LoginPage(driver)\n        login.login()\n        create = MainPage(driver)\n        create.add_filling_to_order()\n        create.click_create_order_button()\n        order = OrderPage(driver)\n        order_id = order.get_order_id()\n>       order.click_cross_order()\n\ntests\\test_order_feed.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\order_page.py:32: in click_cross_order\n    button = self.wait_and_find_element(OrderPageLocators.CLOSE_MODAL_ORDER)\npages\\base_page.py:19: in wait_and_find_element\n    WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable(locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C89030EED0>, response = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Failed to decode response from marionette\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "steps": [{"name": "Открыть страницу по адресу.", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/login'"}], "start": 1728852354778, "stop": 1728852355997}, {"name": "Ввод электронной почты в поле 'Email'", "status": "passed", "start": 1728852355997, "stop": 1728852356034}, {"name": "Ввод пароля в поле 'Пароль'", "status": "passed", "start": 1728852356034, "stop": 1728852356050}, {"name": "Нажатие на кнопку 'Войти'", "status": "passed", "start": 1728852356050, "stop": 1728852356272}, {"name": "Перетащить Флюоресцентную булку R2-D3", "status": "passed", "start": 1728852356792, "stop": 1728852357359}, {"name": "Клик на кнопку \"Оформить заказ\"", "status": "passed", "start": 1728852357359, "stop": 1728852357575}, {"name": "Получение ID созданного заказа", "status": "passed", "start": 1728852357575, "stop": 1728852474409}, {"name": "Нажатие на крестик в окне с ифнормацией о созданном заказе", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette\n\n", "trace": "  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Berli\\Diplom_Vladimir_Berlin_9\\Diplom_3\\pages\\order_page.py\", line 32, in click_cross_order\n    button = self.wait_and_find_element(OrderPageLocators.CLOSE_MODAL_ORDER)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Berli\\Diplom_Vladimir_Berlin_9\\Diplom_3\\pages\\base_page.py\", line 19, in wait_and_find_element\n    WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable(locator))\n  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 363, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Berli\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1728852474409, "stop": 1728852476462}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1728852354777, "stop": 1728852476477, "uuid": "8fe256d0-1aef-4cd4-a20a-98b6bf5c0b11", "historyId": "86add2cdf60ef239f5a8c82939e8c608", "testCaseId": "a616a66bc46d8f3fcb67d74949230845", "fullName": "tests.test_order_feed.TestMainPage#test_id_order_history_found_in_feed_orders", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "Vladimir"}, {"name": "thread", "value": "487904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}